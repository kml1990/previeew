{"version":3,"sources":["common/routes/Routes.ts","types/Orientation.ts","components/settings/device_zoom/DeviceZoom.tsx","components/common/button/Button.tsx","components/settings/device_orientation/DeviceOrientation.tsx","components/settings/url_search/UrlSearch.tsx","components/common/context/SettingsContext.tsx","types/domain/Device.ts","common/filter/FilterService.ts","types/marshalling/DeviceUnmarshaller.ts","utils/string/StringUtil.ts","common/devices/DeviceService.ts","common/devices/DeviceSettingsService.ts","common/di/DependencyContainer.ts","common/di/DependencyContext.tsx","components/common/context/FilterContext.tsx","components/common/sidebar/SidebarButton.tsx","components/device/device_iframe/DeviceIframe.tsx","components/device/Device.tsx","components/home/Home.tsx","components/common/header/Header.tsx","common/hooks/UseBackdrop.ts","components/filters/section/FilterSection.tsx","components/filters/selected_devices/SelectedDevices.tsx","components/filters/filter_entity/FilterEntity.tsx","components/filters/DeviceFilter.tsx","components/common/sidebar/Sidebar.tsx","components/app/App.tsx","components/common/context/ContextProvider.tsx","serviceWorker.ts","index.tsx"],"names":["Routes","Orientation","React","memo","className","useSettings","zoom","setZoom","Form","Group","Label","Control","type","onChange","event","newZoom","parseInt","target","value","defaultValue","min","max","step","custom","ButtonVariant","ButtonType","text","variant","PRIMARY","icon","BUTTON","active","onClick","activeClass","withIconClass","DEFAULT_DEVICE_ORIENTATION","PORTRAIT","orientation","setOrientation","SECONDARY","faMobileAlt","LANDSCAPE","url","setUrl","initialValues","onSubmit","values","errors","touched","name","placeholder","faSearch","SUBMIT","SettingsContext","createContext","useContext","SettingsProvider","DeviceType","children","useState","searchUrl","setSearchUrl","deviceZoom","setDeviceZoom","deviceOrientation","setDeviceOrientation","SettingsProviderValues","Provider","Filterable","Device","deviceData","_name","_type","_make","_platform","_width","_height","_physicalSizeInInch","_physicalSizeInCm","_deviceWidth","_pixelsPerInch","_pixelRatio","_originalConfig","make","platform","width","height","physicalSizeInInch","physicalSizeInCm","deviceWidth","pixelsPerInch","pixelRatio","this","DeviceUnmarshaller","injectable","deviceDto","physical_size_inch","physical_size_cm","device_width","px_per_in","pixel_ratio","StringUtil","word","length","charAt","toUpperCase","slice","FilterService","addNewFilterType","filters","filterName","filter","filtersCopy","_","cloneDeep","set","updateFilterType","get","includes","removeFilterFromFilterType","updateFilterTypeWithNewFilter","filterDevices","devices","query","buildQuery","device","checkDeviceAgainstFilter","deviceAsObject","getAsObject","Object","keys","every","key","isUndefined","filterValues","filterIndex","indexOf","splice","removeEmptyFilterType","delete","forEach","DEFAULT_SELECTED_DEVICES","DeviceService","_devices","_selectedDevices","_devicePlatforms","_deviceMakes","_deviceUnmarshaller","Map","Set","dependenciesContainer","size","loadAllDevices","Array","from","selectedDevices","getDefaultSelectedDevices","map","deviceType","capitalize","property","TYPE","getTypes","PLATFORM","getPlatforms","MAKE","getMakes","reduce","testing","add","DeviceDTOs","deviceMap","unmarshal","addFilters","DeviceSettingsService","getZoomScale","Container","services","ContainerModule","bind","toSelf","inSingletonScope","domain","load","DependencyContext","DependencyProvider","container","useInjection","identifier","Error","FilterContext","useFilter","FilterProvider","PopoverPlacement","deviceService","filterService","setFilters","setDevices","filteredDevices","setFilteredDevices","setSelectedDevices","useEffect","allDevices","getAllDevices","getSelectedDevices","filterProviderValues","addFilter","has","updateSelectedDevices","selectedOptions","selected","deviceObjectStyle","frameProps","style","transform","transformOrigin","deviceOrientationClass","title","src","deviceSettingsService","deviceHeight","getSize","deviceStyle","getSizeBasedOnSettings","setSelected","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","faGithub","useBackdrop","isVisible","setIsVisible","useLayoutEffect","document","body","classList","remove","placement","RIGHT","toggleBackdrop","popover","Popover","Title","as","Content","OverlayTrigger","trigger","overlay","onExiting","rootClose","helper","filtered","setFiltered","deviceAsOption","label","classNamePrefix","option","options","isMulti","entity","setEntity","getEntity","entityItem","isFilterSelected","filterProperty","isSelected","selectedClass","additionalProps","faCheck","faFilter","faSearchPlus","App","basename","exact","path","HOME","component","Home","ContextProvider","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9a1b996c.chunk.js","sourcesContent":["export enum Routes {\r\n    HOME = '/',\r\n}","export enum Orientation {\r\n    PORTRAIT = 'portrait',\r\n    LANDSCAPE = 'landscape',\r\n}","import React, { ChangeEvent } from 'react';\r\nimport { Form } from 'react-bootstrap';\r\nimport { useSettings } from '../../common/context/SettingsContext';\r\n\r\nimport './DeviceZoom.scss';\r\n\r\nexport interface DeviceZoomProps {\r\n    className?: string;\r\n}\r\n\r\nexport const DEFAULT_RADIX = 10;\r\nexport const ZOOM_MIN = 30;\r\nexport const ZOOM_MAX = 100;\r\nexport const ZOOM_STEP = 1;\r\nexport const DEFAULT_DEVICE_ZOOM = 60;\r\n\r\nconst DeviceZoom: React.FC<DeviceZoomProps> = ({ className }) => {\r\n    const { zoom, setZoom } = useSettings();\r\n\r\n    const onZoomChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const newZoom = parseInt(event.target.value, DEFAULT_RADIX);\r\n        setZoom(newZoom);\r\n    };\r\n\r\n    return (\r\n        <div className={`DeviceZoom ${className}`}>\r\n            <Form.Group className=\"DeviceZoom__formGroup\">\r\n                <Form.Label>{`${zoom}%`}</Form.Label>\r\n                <Form.Control\r\n                    className=\"DeviceZoom__input\"\r\n                    type=\"range\"\r\n                    onChange={onZoomChange}\r\n                    defaultValue={zoom}\r\n                    min={ZOOM_MIN}\r\n                    max={ZOOM_MAX}\r\n                    step={ZOOM_STEP}\r\n                    custom\r\n                />\r\n            </Form.Group>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(DeviceZoom);\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\n\r\nimport './Button.scss';\r\n\r\nexport type OnClickCallback = (...args: any) => void;\r\n\r\nexport enum ButtonVariant {\r\n    PRIMARY = 'Button__primary',\r\n    SECONDARY = 'Button__secondary',\r\n}\r\n\r\nexport enum ButtonType {\r\n    BUTTON = 'button',\r\n    SUBMIT = 'submit',\r\n    RESET = 'reset',\r\n}\r\n\r\nexport interface ButtonProps {\r\n    text?: string;\r\n    variant?: ButtonVariant;\r\n    icon?: IconProp;\r\n    type?: ButtonType;\r\n    className?: string;\r\n    active?: boolean;\r\n    onClick?: OnClickCallback;\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = ({\r\n    text = '',\r\n    variant = ButtonVariant.PRIMARY,\r\n    icon,\r\n    className,\r\n    type = ButtonType.BUTTON,\r\n    active = false,\r\n    onClick,\r\n}) => {\r\n    const activeClass = active ? `${variant}--active` : '';\r\n    const withIconClass = icon ? 'Button--withIcon' : '';\r\n    return (\r\n        <button\r\n            type={type}\r\n            className={`Button ${variant} ${activeClass} ${withIconClass} ${className}`}\r\n            onClick={onClick}\r\n        >\r\n            {icon && <FontAwesomeIcon className=\"Button__icon\" icon={icon} />}\r\n            {text && <span className=\"Button__text\">{text}</span>}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default React.memo(Button);\r\n","import React from 'react';\r\nimport { faMobileAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { Orientation } from '../../../types/Orientation';\r\nimport { useSettings } from '../../common/context/SettingsContext';\r\nimport Button, { ButtonVariant } from '../../common/button/Button';\r\n\r\nimport './DeviceOrientation.scss';\r\n\r\nexport interface DeviceOrientationProps {\r\n    className?: string;\r\n}\r\n\r\nexport const DEFAULT_DEVICE_ORIENTATION = Orientation.PORTRAIT;\r\n\r\nconst DeviceOrientation: React.FC<DeviceOrientationProps> = ({ className = '' }) => {\r\n    const { orientation, setOrientation } = useSettings();\r\n\r\n    return (\r\n        <div className={`DeviceOrientation ${className}`}>\r\n            <Button\r\n                className=\"DeviceOrientation__button DeviceOrientation__portrait\"\r\n                variant={ButtonVariant.SECONDARY}\r\n                icon={faMobileAlt}\r\n                active={orientation === Orientation.PORTRAIT}\r\n                onClick={() => setOrientation(Orientation.PORTRAIT)}\r\n            />\r\n            <Button\r\n                className=\"DeviceOrientation__button DeviceOrientation__landscape\"\r\n                variant={ButtonVariant.SECONDARY}\r\n                icon={faMobileAlt}\r\n                active={orientation === Orientation.LANDSCAPE}\r\n                onClick={() => setOrientation(Orientation.LANDSCAPE)}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(DeviceOrientation);\r\n","import React from 'react';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport Button, { ButtonVariant, ButtonType } from '../../common/button/Button';\r\n\r\nimport './UrlSearch.scss';\r\nimport { useSettings } from '../../common/context/SettingsContext';\r\n\r\nexport interface UrlSearch {\r\n    url: string;\r\n}\r\n\r\nexport interface UrlSearchProps {\r\n    className?: string;\r\n}\r\n\r\nexport const DEFAULT_SEARCH_URL = 'https://www.wikipedia.org/';\r\n\r\nconst UrlSearch: React.FC<UrlSearchProps> = ({ className = '' }) => {\r\n    const { url, setUrl } = useSettings();\r\n\r\n    const onSubmit = (values: UrlSearch) => {\r\n        setUrl(values.url);\r\n    };\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                url: url || DEFAULT_SEARCH_URL,\r\n            }}\r\n            onSubmit={onSubmit}\r\n        >\r\n            {({ errors, touched }) => (\r\n                <Form className={`UrlSearch ${className}`}>\r\n                    <Field\r\n                        name=\"url\"\r\n                        placeholder=\"Enter Url\"\r\n                        className=\"UrlSearch__input form-control mr-sm-2\"\r\n                    />\r\n                    {errors.url && touched.url && errors.url}\r\n                    <Button\r\n                        text=\"Search\"\r\n                        variant={ButtonVariant.PRIMARY}\r\n                        icon={faSearch}\r\n                        type={ButtonType.SUBMIT}\r\n                        className=\"UrlSearch__button\"\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default React.memo(UrlSearch);\r\n","import React, { createContext, useState, useContext } from 'react';\r\nimport { Orientation } from '../../../types/Orientation';\r\nimport { DEFAULT_DEVICE_ZOOM } from '../../settings/device_zoom/DeviceZoom';\r\nimport { DEFAULT_DEVICE_ORIENTATION } from '../../settings/device_orientation/DeviceOrientation';\r\nimport { DEFAULT_SEARCH_URL } from '../../settings/url_search/UrlSearch';\r\n\r\nexport type SetUrlCallback = (url: string) => void;\r\nexport type SetZoomCallback = (zoom: number) => void;\r\nexport type SetOrientationCallback = (orientation: Orientation) => void;\r\n\r\nexport interface SettingsContextProps {\r\n    url: string;\r\n    setUrl: SetUrlCallback;\r\n    zoom: number;\r\n    setZoom: SetZoomCallback;\r\n    orientation: Orientation;\r\n    setOrientation: SetOrientationCallback;\r\n}\r\n\r\nexport const SettingsContext = createContext<SettingsContextProps>({} as SettingsContextProps);\r\n\r\nconst SettingsProvider: React.FC = ({ children }) => {\r\n    const [searchUrl, setSearchUrl] = useState<string>(DEFAULT_SEARCH_URL);\r\n    const [deviceZoom, setDeviceZoom] = useState<number>(DEFAULT_DEVICE_ZOOM);\r\n    const [deviceOrientation, setDeviceOrientation] = useState<Orientation>(\r\n        DEFAULT_DEVICE_ORIENTATION,\r\n    );\r\n\r\n    const setUrl = (url: string) => {\r\n        setSearchUrl(url);\r\n    };\r\n\r\n    const setZoom = (zoom: number) => {\r\n        setDeviceZoom(zoom);\r\n    };\r\n\r\n    const setOrientation = (orientation: Orientation) => {\r\n        setDeviceOrientation(orientation);\r\n    };\r\n\r\n    const SettingsProviderValues = {\r\n        url: searchUrl,\r\n        zoom: deviceZoom,\r\n        orientation: deviceOrientation,\r\n        setUrl,\r\n        setZoom,\r\n        setOrientation,\r\n    };\r\n\r\n    return (\r\n        <SettingsContext.Provider value={SettingsProviderValues}>\r\n            {children}\r\n        </SettingsContext.Provider>\r\n    );\r\n};\r\n\r\nexport function useSettings(): SettingsContextProps {\r\n    return useContext(SettingsContext);\r\n}\r\n\r\nexport default SettingsProvider;\r\n","import { Make } from '../Make';\r\nimport Platform from '../Platform';\r\n\r\nexport enum DeviceType {\r\n    PHONE = 'phone',\r\n    TABLET = 'tablet',\r\n    MONITOR = 'monitor',\r\n}\r\n\r\nexport interface DeviceData {\r\n    name: string;\r\n    type: DeviceType;\r\n    make: Make;\r\n    platform: Platform;\r\n    width: number;\r\n    height: number;\r\n    physicalSizeInInch: number;\r\n    physicalSizeInCm: number;\r\n    deviceWidth: number;\r\n    pixelsPerInch: number;\r\n    pixelRatio: number;\r\n}\r\n\r\nexport default class Device {\r\n    private readonly _name: string;\r\n\r\n    private readonly _type: DeviceType;\r\n\r\n    private readonly _make: Make;\r\n\r\n    private readonly _platform: Platform;\r\n\r\n    private readonly _width: number;\r\n\r\n    private readonly _height: number;\r\n\r\n    private readonly _physicalSizeInInch: number;\r\n\r\n    private readonly _physicalSizeInCm: number;\r\n\r\n    private readonly _deviceWidth: number;\r\n\r\n    private readonly _pixelsPerInch: number;\r\n\r\n    private readonly _pixelRatio: number;\r\n\r\n    private readonly _originalConfig: DeviceData;\r\n\r\n    constructor(deviceData: DeviceData) {\r\n        const {\r\n            name,\r\n            type,\r\n            make,\r\n            platform,\r\n            width,\r\n            height,\r\n            physicalSizeInInch,\r\n            physicalSizeInCm,\r\n            deviceWidth,\r\n            pixelsPerInch,\r\n            pixelRatio,\r\n        } = deviceData;\r\n\r\n        this._name = name;\r\n        this._type = type;\r\n        this._make = make;\r\n        this._platform = platform;\r\n        this._width = width;\r\n        this._height = height;\r\n        this._physicalSizeInInch = physicalSizeInInch;\r\n        this._physicalSizeInCm = physicalSizeInCm;\r\n        this._deviceWidth = deviceWidth;\r\n        this._pixelsPerInch = pixelsPerInch;\r\n        this._pixelRatio = pixelRatio;\r\n        this._originalConfig = deviceData;\r\n    }\r\n\r\n    get name(): string {\r\n        return this._name;\r\n    }\r\n\r\n    get type(): DeviceType {\r\n        return this._type;\r\n    }\r\n\r\n    get make(): Make {\r\n        return this._make;\r\n    }\r\n\r\n    get platform(): Platform {\r\n        return this._platform;\r\n    }\r\n\r\n    get width(): number {\r\n        return this._width;\r\n    }\r\n\r\n    get height(): number {\r\n        return this._height;\r\n    }\r\n\r\n    get physicalSizeInInch(): number {\r\n        return this._physicalSizeInInch;\r\n    }\r\n\r\n    get physicalSizeInCm(): number {\r\n        return this._physicalSizeInCm;\r\n    }\r\n\r\n    get deviceWidth(): number {\r\n        return this._deviceWidth;\r\n    }\r\n\r\n    get pixelsPerInch(): number {\r\n        return this._pixelsPerInch;\r\n    }\r\n\r\n    get pixelRatio(): number {\r\n        return this._pixelRatio;\r\n    }\r\n\r\n    // TODO fix this type\r\n    getAsObject(): any {\r\n        return { ...this._originalConfig };\r\n    }\r\n}\r\n","import _ from 'lodash';\r\nimport { injectable } from 'inversify';\r\nimport Device from '../../types/domain/Device';\r\n\r\nexport enum Filterable {\r\n    TYPE = 'type',\r\n    PLATFORM = 'platform',\r\n    MAKE = 'make',\r\n}\r\n\r\nexport type Filters = Map<Filterable, string[]>;\r\nexport type Query = { [key: string]: string[] };\r\n\r\n@injectable()\r\nexport default class FilterService {\r\n    addNewFilterType = (filters: Filters, filterName: Filterable, filter: string): Filters => {\r\n        const filtersCopy = _.cloneDeep(filters);\r\n        filtersCopy.set(filterName, [filter]);\r\n        return filtersCopy;\r\n    };\r\n\r\n    updateFilterType = (filters: Filters, filterName: Filterable, filter: string): Filters => {\r\n        const filterValues = filters.get(filterName) as string[];\r\n\r\n        if (!filterValues.includes(filter)) {\r\n            return this.updateFilterTypeWithNewFilter(filters, filterName, filter);\r\n        }\r\n\r\n        return this.removeFilterFromFilterType(filters, filterName, filter);\r\n    };\r\n\r\n    filterDevices = (devices: Device[], filter: Filters) => {\r\n        const query = this.buildQuery(filter);\r\n        const filteredDevices = devices.filter((device: Device) => {\r\n            return this.checkDeviceAgainstFilter(device, query);\r\n        });\r\n        return filteredDevices;\r\n    };\r\n\r\n    private checkDeviceAgainstFilter = (device: Device, query: Query): boolean => {\r\n        const deviceAsObject = device.getAsObject();\r\n        return Object.keys(query).every((key: string) => {\r\n            if (_.isUndefined(deviceAsObject[key])) {\r\n                return false;\r\n            }\r\n            if (!query[key].includes(deviceAsObject[key])) {\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n    };\r\n\r\n    private removeFilterFromFilterType = (\r\n        filters: Filters,\r\n        filterName: Filterable,\r\n        filter: string,\r\n    ): Filters => {\r\n        const filtersCopy = _.cloneDeep(filters);\r\n        const filterValues = filtersCopy.get(filterName) as string[];\r\n        const filterIndex = filterValues.indexOf(filter);\r\n\r\n        filterValues.splice(filterIndex, 1);\r\n        if (filterValues.length === 0) {\r\n            return this.removeEmptyFilterType(filtersCopy, filterName);\r\n        }\r\n        return filtersCopy.set(filterName, [...filterValues]);\r\n    };\r\n\r\n    private updateFilterTypeWithNewFilter = (\r\n        filters: Filters,\r\n        filterName: Filterable,\r\n        filter: string,\r\n    ): Filters => {\r\n        const filtersCopy = _.cloneDeep(filters);\r\n        const filterValues = filtersCopy.get(filterName) as string[];\r\n\r\n        filtersCopy.set(filterName, [...filterValues, filter]);\r\n        return filtersCopy;\r\n    };\r\n\r\n    private removeEmptyFilterType = (filters: Filters, filterName: Filterable): Filters => {\r\n        const filtersCopy = _.cloneDeep(filters);\r\n        filtersCopy.delete(filterName);\r\n        return filtersCopy;\r\n    };\r\n\r\n    private buildQuery = (filters: Filters): Query => {\r\n        const query: Query = {};\r\n        filters.forEach((value: string[], key: Filterable) => {\r\n            query[key] = value;\r\n        });\r\n        return query;\r\n    };\r\n}\r\n","import { injectable } from 'inversify';\r\nimport Device from '../domain/Device';\r\nimport { Unmarshaller } from './Unmarshalling';\r\nimport { DeviceDTO } from '../dto/DeviceDto';\r\n\r\n@injectable()\r\nexport default class DeviceUnmarshaller implements Unmarshaller<DeviceDTO, Device> {\r\n    unmarshal(deviceDto: DeviceDTO): Device {\r\n        const {\r\n            name,\r\n            type,\r\n            make,\r\n            platform,\r\n            width,\r\n            height,\r\n            physical_size_inch,\r\n            physical_size_cm,\r\n            device_width,\r\n            px_per_in,\r\n            pixel_ratio,\r\n        } = deviceDto;\r\n\r\n        return new Device({\r\n            name,\r\n            type,\r\n            make,\r\n            platform,\r\n            width,\r\n            height,\r\n            physicalSizeInInch: physical_size_inch,\r\n            physicalSizeInCm: physical_size_cm,\r\n            deviceWidth: device_width,\r\n            pixelsPerInch: px_per_in,\r\n            pixelRatio: pixel_ratio,\r\n        });\r\n    }\r\n}\r\n","export default class StringUtil {\r\n    static capitalize(word: string): string {\r\n        if (word.length === 0) {\r\n            return '';\r\n        }\r\n        return word.charAt(0).toUpperCase() + word.slice(1);\r\n    }\r\n}\r\n","import { injectable } from 'inversify';\r\nimport DeviceDTOs from './Devices.json';\r\nimport DeviceUnmarshaller from '../../types/marshalling/DeviceUnmarshaller';\r\nimport dependenciesContainer from '../di/DependencyContainer';\r\nimport { DeviceDTO } from '../../types/dto/DeviceDto';\r\nimport Device, { DeviceType } from '../../types/domain/Device';\r\nimport StringUtil from '../../utils/string/StringUtil';\r\nimport { Filterable } from '../filter/FilterService';\r\n\r\nexport type DeviceMap = Map<string, Device>;\r\n\r\nconst DEFAULT_SELECTED_DEVICES = [\r\n    'Apple iPhone X',\r\n    'Apple iPhone 6',\r\n    'Apple iPhone 8',\r\n    'Samsung Galaxy S8',\r\n    'Google Pixel XL',\r\n];\r\n\r\n@injectable()\r\nexport default class DeviceService {\r\n    private _devices: DeviceMap;\r\n\r\n    private _selectedDevices: Set<Device>;\r\n\r\n    private _devicePlatforms: Set<string>;\r\n\r\n    private _deviceMakes: Set<string>;\r\n\r\n    private readonly _deviceUnmarshaller: DeviceUnmarshaller;\r\n\r\n    constructor() {\r\n        this._devices = new Map();\r\n        this._selectedDevices = new Set();\r\n        this._devicePlatforms = new Set();\r\n        this._deviceMakes = new Set();\r\n\r\n        this._deviceUnmarshaller = dependenciesContainer.get(DeviceUnmarshaller);\r\n    }\r\n\r\n    getAllDevices(): Device[] {\r\n        if (this._devices.size === 0) {\r\n            this._devices = this.loadAllDevices();\r\n        }\r\n        return Array.from(this._devices.values());\r\n    }\r\n\r\n    getSelectedDevices(): Device[] {\r\n        if (this._selectedDevices.size === 0) {\r\n            const selectedDevices = this.getDefaultSelectedDevices();\r\n            return Array.from(selectedDevices);\r\n        }\r\n        return Array.from(this._selectedDevices);\r\n    }\r\n\r\n    getTypes(): string[] {\r\n        return Object.values(DeviceType).map((deviceType: string) =>\r\n            StringUtil.capitalize(deviceType),\r\n        );\r\n    }\r\n\r\n    getPlatforms(): string[] {\r\n        return Array.from(this._devicePlatforms);\r\n    }\r\n\r\n    getMakes(): string[] {\r\n        return Array.from(this._deviceMakes);\r\n    }\r\n\r\n    getEntity(property: Filterable): string[] {\r\n        switch (property) {\r\n            case Filterable.TYPE: {\r\n                return this.getTypes();\r\n            }\r\n            case Filterable.PLATFORM: {\r\n                return this.getPlatforms();\r\n            }\r\n            case Filterable.MAKE: {\r\n                return this.getMakes();\r\n            }\r\n            default: {\r\n                return [];\r\n            }\r\n        }\r\n    }\r\n\r\n    private getDefaultSelectedDevices(): Set<Device> {\r\n        if (this._devices.size === 0) {\r\n            this._devices = this.loadAllDevices();\r\n        }\r\n        return DEFAULT_SELECTED_DEVICES.reduce((testing: Set<Device>, name: string) => {\r\n            const device = this._devices.get(name);\r\n            if (device) {\r\n                testing.add(device);\r\n            }\r\n            return testing;\r\n        }, new Set());\r\n    }\r\n\r\n    private addFilters(device: Device) {\r\n        const { platform, make } = device;\r\n        if (platform) {\r\n            this._devicePlatforms.add(platform);\r\n        }\r\n        if (make) {\r\n            this._deviceMakes.add(make);\r\n        }\r\n    }\r\n\r\n    private loadAllDevices(): DeviceMap {\r\n        const devices = DeviceDTOs as DeviceDTO[];\r\n        return devices.reduce((deviceMap: DeviceMap, deviceDto: DeviceDTO) => {\r\n            const device = this._deviceUnmarshaller.unmarshal(deviceDto);\r\n            this.addFilters(device);\r\n            deviceMap.set(device.name, device);\r\n            return deviceMap;\r\n        }, new Map());\r\n    }\r\n}\r\n","import { injectable } from 'inversify';\r\nimport { Orientation } from '../../types/Orientation';\r\n\r\nexport interface DeviceSize {\r\n    height: number;\r\n    width: number;\r\n}\r\n\r\nconst ZOOM_PERCENTAGE_TO_TENTHS = 100;\r\n\r\n@injectable()\r\nexport default class DeviceSettingsService {\r\n    static getSize(size: number, pixelRatio: number): number {\r\n        return size / pixelRatio;\r\n    }\r\n\r\n    getSizeBasedOnSettings(\r\n        height: number,\r\n        width: number,\r\n        orientation: Orientation,\r\n        zoom: number,\r\n    ): DeviceSize {\r\n        if (orientation === Orientation.LANDSCAPE) {\r\n            return {\r\n                height: width * this.getZoomScale(zoom),\r\n                width: height * this.getZoomScale(zoom),\r\n            };\r\n        }\r\n        return {\r\n            height: height * this.getZoomScale(zoom),\r\n            width: width * this.getZoomScale(zoom),\r\n        };\r\n    }\r\n\r\n    private getZoomScale(zoom: number): number {\r\n        return zoom / ZOOM_PERCENTAGE_TO_TENTHS;\r\n    }\r\n}\r\n","import { Container, ContainerModule, interfaces } from 'inversify';\r\nimport DeviceService from '../devices/DeviceService';\r\nimport DeviceUnmarshaller from '../../types/marshalling/DeviceUnmarshaller';\r\nimport DeviceSettingsService from '../devices/DeviceSettingsService';\r\nimport FilterService from '../filter/FilterService';\r\n\r\nconst dependenciesContainer = new Container();\r\n\r\nconst services = new ContainerModule((bind: interfaces.Bind) => {\r\n    bind<DeviceService>(DeviceService).toSelf().inSingletonScope();\r\n    bind<DeviceSettingsService>(DeviceSettingsService).toSelf().inSingletonScope();\r\n    bind<FilterService>(FilterService).toSelf().inSingletonScope();\r\n});\r\n\r\nconst domain = new ContainerModule((bind: interfaces.Bind) => {\r\n    bind<DeviceUnmarshaller>(DeviceUnmarshaller).toSelf().inSingletonScope();\r\n});\r\n\r\ndependenciesContainer.load(services, domain);\r\n\r\nexport default dependenciesContainer;\r\n","import React, { createContext, useContext } from 'react';\r\nimport { Container, interfaces } from 'inversify';\r\n\r\nconst DependencyContext = createContext<Container | null>(null);\r\n\r\ninterface DependenciesProps {\r\n    container: Container;\r\n}\r\n\r\nexport const DependencyProvider: React.FC<DependenciesProps> = ({ children, container }) => {\r\n    return <DependencyContext.Provider value={container}>{children}</DependencyContext.Provider>;\r\n};\r\n\r\nexport function useInjection<T>(identifier: interfaces.ServiceIdentifier<T>) {\r\n    const container = useContext(DependencyContext);\r\n    if (container === null) {\r\n        throw new Error(`The dependency container should be defined`);\r\n    }\r\n    return container.get<T>(identifier);\r\n}","import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport dependenciesContainer from '../../../common/di/DependencyContainer';\r\nimport { useInjection } from '../../../common/di/DependencyContext';\r\nimport FilterService, { Filterable, Filters } from '../../../common/filter/FilterService';\r\nimport DeviceService from '../../../common/devices/DeviceService';\r\nimport Device from '../../../types/domain/Device';\r\n\r\nexport type AddFilterCallaback = (filterName: Filterable, filter: string) => void;\r\nexport type UpdateSelectedDevicesCallaback = (selected: string[]) => void;\r\n\r\nexport interface FilterContextProps {\r\n    filteredDevices: Device[];\r\n    selectedDevices: Device[];\r\n    filters: Filters;\r\n    addFilter: AddFilterCallaback;\r\n    updateSelectedDevices: UpdateSelectedDevicesCallaback;\r\n}\r\n\r\nexport const FilterContext = createContext<FilterContextProps>({} as FilterContextProps);\r\n\r\nconst FilterProvider: React.FC = ({ children }) => {\r\n    const deviceService = dependenciesContainer.get(DeviceService);\r\n    const filterService = useInjection(FilterService);\r\n\r\n    const [filters, setFilters] = useState<Filters>(new Map());\r\n    const [devices, setDevices] = useState<Device[]>([]);\r\n    const [filteredDevices, setFilteredDevices] = useState<Device[]>([]);\r\n    const [selectedDevices, setSelectedDevices] = useState<Device[]>([]);\r\n\r\n    useEffect(() => {\r\n        const allDevices = deviceService.getAllDevices();\r\n        setDevices(allDevices);\r\n        setFilteredDevices(allDevices);\r\n        setSelectedDevices(deviceService.getSelectedDevices());\r\n    }, [deviceService]);\r\n\r\n    const applyFilters = () => {\r\n        if (filters.size === 0) {\r\n            return;\r\n        }\r\n\r\n        setFilteredDevices(filterService.filterDevices(devices, filters));\r\n    };\r\n\r\n    useEffect(() => {\r\n        applyFilters();\r\n        // eslint-disable-next-line\r\n    }, [filters]);\r\n\r\n    const addFilter = (filterName: Filterable, filter: string) => {\r\n        if (!filters.has(filterName)) {\r\n            setFilters(filterService.addNewFilterType(filters, filterName, filter));\r\n            return;\r\n        }\r\n        setFilters(filterService.updateFilterType(filters, filterName, filter));\r\n    };\r\n\r\n    const updateSelectedDevices = (selectedOptions: string[]) => {\r\n        const selected = devices.filter((device: Device) => {\r\n            return selectedOptions.includes(device.name);\r\n        });\r\n        setSelectedDevices(selected);\r\n    };\r\n\r\n    const filterProviderValues = {\r\n        filteredDevices,\r\n        selectedDevices,\r\n        filters,\r\n        addFilter,\r\n        updateSelectedDevices,\r\n    };\r\n\r\n    return <FilterContext.Provider value={filterProviderValues}>{children}</FilterContext.Provider>;\r\n};\r\n\r\nexport function useFilter(): FilterContextProps {\r\n    return useContext(FilterContext);\r\n}\r\n\r\nexport default FilterProvider;\r\n","import React, { ReactElement } from 'react';\r\nimport { OverlayTrigger, Popover } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport useBackdrop from '../../../common/hooks/UseBackdrop';\r\n\r\nimport './SidebarButton.scss';\r\n\r\nexport enum PopoverPlacement {\r\n    TOP = 'top',\r\n    RIGHT = 'right',\r\n    BOTTOM = 'bottom',\r\n    LEFT = 'left',\r\n}\r\n\r\nexport interface SidebarButtonProps {\r\n    title: string;\r\n    icon: IconProp;\r\n    placement?: PopoverPlacement;\r\n    className?: string;\r\n    children?: ReactElement;\r\n}\r\n\r\nconst SidebarButton: React.FC<SidebarButtonProps> = ({\r\n    title,\r\n    placement = PopoverPlacement.RIGHT,\r\n    className,\r\n    icon,\r\n    children,\r\n}) => {\r\n    const [toggleBackdrop] = useBackdrop();\r\n\r\n    const onClick = () => {\r\n        toggleBackdrop();\r\n    };\r\n\r\n    const popover = (\r\n        <Popover id={title} className=\"SidebarButton__popover shadow\">\r\n            <Popover.Title className=\"SidebarButton__popoverTitle\" as=\"h3\">\r\n                {title}\r\n            </Popover.Title>\r\n            <Popover.Content className=\"SidebarButton__popoverContent\">{children}</Popover.Content>\r\n        </Popover>\r\n    );\r\n\r\n    return (\r\n        <div className={`SidebarButton ${className}`}>\r\n            <OverlayTrigger\r\n                trigger=\"click\"\r\n                placement={placement}\r\n                overlay={popover}\r\n                onExiting={onClick}\r\n                rootClose\r\n            >\r\n                <button type=\"button\" className=\"Sidebar__menuItem\" onClick={onClick}>\r\n                    <FontAwesomeIcon className=\"Sidebar__menuIcon\" icon={icon} />\r\n                </button>\r\n            </OverlayTrigger>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(SidebarButton);\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Orientation } from '../../../types/Orientation';\r\nimport { useSettings } from '../../common/context/SettingsContext';\r\n\r\nimport './DeviceIframe.scss';\r\n\r\nexport interface DeviceIframeProps {\r\n    name: string;\r\n    orientation: Orientation;\r\n    height: number;\r\n    width: number;\r\n}\r\n\r\nconst DeviceIframe: React.FC<DeviceIframeProps> = ({ name, orientation, height, width }) => {\r\n    const { url, zoom } = useSettings();\r\n    const [searchUrl, setSearchUrl] = useState<string>();\r\n\r\n    useEffect(() => {\r\n        if (url !== searchUrl) {\r\n            setSearchUrl(url);\r\n        }\r\n    }, [url, searchUrl]);\r\n\r\n    const deviceObjectStyle = {\r\n        height: orientation === Orientation.PORTRAIT ? height : width,\r\n        width: orientation === Orientation.PORTRAIT ? width : height,\r\n    };\r\n\r\n    const frameProps = {\r\n        style: {\r\n            transform: `scale(${zoom / 100})`,\r\n            transformOrigin: 'top left',\r\n            ...deviceObjectStyle,\r\n        },\r\n        width: `${deviceObjectStyle.width}px`,\r\n        height: `${deviceObjectStyle.height}px`,\r\n    };\r\n\r\n    const deviceOrientationClass = `Device--${orientation}`;\r\n\r\n    return (\r\n        <div className={`DeviceIframe ${deviceOrientationClass}`} style={deviceObjectStyle}>\r\n            <iframe\r\n                className=\"DeviceIframe__iframe shadow-sm\"\r\n                title={name}\r\n                src={searchUrl}\r\n                {...frameProps}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(DeviceIframe);\r\n","import React from 'react';\r\nimport { useInjection } from '../../common/di/DependencyContext';\r\nimport DeviceSettingsService from '../../common/devices/DeviceSettingsService';\r\nimport DeviceDomain from '../../types/domain/Device';\r\nimport DeviceIframe from './device_iframe/DeviceIframe';\r\nimport { useSettings } from '../common/context/SettingsContext';\r\n\r\nimport './Device.scss';\r\n\r\nexport interface DeviceProps {\r\n    device: DeviceDomain;\r\n}\r\n\r\nconst Device: React.FC<DeviceProps> = ({ device: { name, height, width, pixelRatio } }) => {\r\n    const deviceSettingsService = useInjection(DeviceSettingsService);\r\n    const { zoom, orientation } = useSettings();\r\n\r\n    const deviceHeight = DeviceSettingsService.getSize(height, pixelRatio);\r\n    const deviceWidth = DeviceSettingsService.getSize(width, pixelRatio);\r\n    const deviceStyle = deviceSettingsService.getSizeBasedOnSettings(\r\n        deviceHeight,\r\n        deviceWidth,\r\n        orientation,\r\n        zoom,\r\n    );\r\n\r\n    const deviceOrientationClass = `Device--${orientation}`;\r\n\r\n    return (\r\n        <div className={`Device ${deviceOrientationClass}`} style={deviceStyle}>\r\n            <span className=\"Device__name\">{`${name} (${height} / ${width})`}</span>\r\n            <DeviceIframe\r\n                name={name}\r\n                orientation={orientation}\r\n                height={deviceHeight}\r\n                width={deviceWidth}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(Device);\r\n","import React, { useState, useEffect } from 'react';\r\nimport DeviceDomain from '../../types/domain/Device';\r\nimport { useFilter } from '../common/context/FilterContext';\r\nimport Device from '../device/Device';\r\n\r\nimport './Home.scss';\r\n\r\nconst Home: React.FC = () => {\r\n    const { selectedDevices } = useFilter();\r\n    const [selected, setSelected] = useState<DeviceDomain[]>([]);\r\n\r\n    useEffect(() => {\r\n        setSelected(selectedDevices);\r\n    }, [selectedDevices]);\r\n\r\n    return (\r\n        <div className=\"Home\">\r\n            <div className=\"Devices\">\r\n                {selected.map((device) => {\r\n                    return <Device key={device.name} device={device} />;\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(Home);\r\n","import React from 'react';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\n\r\nimport './Header.scss';\r\n\r\nexport interface HeaderProps {\r\n    className: string;\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = ({ className }) => {\r\n    return (\r\n        <Navbar className={`Header ${className}`} bg=\"light\" expand=\"lg\">\r\n            <Navbar.Brand href=\"#home\">Previeew</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <div className=\"mr-auto\" />\r\n                <Nav>\r\n                    <Nav.Link href=\"https://github.com/kml1990/previeew\" target=\"_blank\">\r\n                        <FontAwesomeIcon className=\"Header__githubIcon\" icon={faGithub} />\r\n                        Github\r\n                    </Nav.Link>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    );\r\n};\r\n\r\nexport default React.memo(Header);\r\n","import { useLayoutEffect, useState } from 'react';\r\n\r\nconst useBackdrop = () => {\r\n    const [isVisible, setIsVisible] = useState<boolean>(false);\r\n\r\n    useLayoutEffect(() => {\r\n        if (isVisible) {\r\n            document.body.classList.add('Body--withBackdrop');\r\n        } else {\r\n            document.body.classList.remove('Body--withBackdrop');\r\n        }\r\n    }, [isVisible]);\r\n\r\n    const toggleBackdrop = () => {\r\n        setIsVisible(!isVisible);\r\n    };\r\n\r\n    return [toggleBackdrop];\r\n};\r\n\r\nexport default useBackdrop;\r\n","import React, { ReactElement } from 'react';\r\n\r\nexport interface FilterSectionProps {\r\n    name: string;\r\n    helper?: string;\r\n    className?: string;\r\n    children: ReactElement;\r\n}\r\n\r\nconst FilterSection: React.FC<FilterSectionProps> = ({ name, helper, className, children }) => {\r\n    return (\r\n        <section className={`FilterSection ${className}`}>\r\n            <h6>{name}</h6>\r\n            {helper && <p>{helper}</p>}\r\n            <div>{children}</div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default React.memo(FilterSection);\r\n","import React, { useState, useEffect } from 'react';\r\nimport Select from 'react-select';\r\nimport { useFilter } from '../../common/context/FilterContext';\r\nimport Device from '../../../types/domain/Device';\r\nimport FilterSection from '../section/FilterSection';\r\n\r\nimport './SelectedDevices.scss';\r\n\r\nexport interface DevicesAsSelectOption {\r\n    value: string;\r\n    label: string;\r\n}\r\n\r\nexport interface SelectedDevicesProps {\r\n    className?: string;\r\n}\r\n\r\nconst SelectedDevices: React.FC<SelectedDevicesProps> = ({ className = '' }) => {\r\n    const { filteredDevices, selectedDevices, updateSelectedDevices } = useFilter();\r\n    const [filtered, setFiltered] = useState<DevicesAsSelectOption[]>([]);\r\n    const [selected, setSelected] = useState<DevicesAsSelectOption[]>([]);\r\n\r\n    const deviceAsOption = (devices: Device[]) => {\r\n        return devices.map((device) => {\r\n            const { name } = device;\r\n            const option = {\r\n                value: name,\r\n                label: name,\r\n            };\r\n            return option;\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        setFiltered(deviceAsOption(filteredDevices));\r\n        setSelected(deviceAsOption(selectedDevices));\r\n    }, [filteredDevices, selectedDevices]);\r\n\r\n    const handleChange = (selectedOptions: any) => {\r\n        setSelected(selectedOptions);\r\n        updateSelectedDevices(selectedOptions.map((option: DevicesAsSelectOption) => option.label));\r\n    };\r\n\r\n    return (\r\n        <FilterSection className={`SelectedDevices ${className}`} name=\"Selected Devices\" helper=\"\">\r\n            <Select\r\n                classNamePrefix=\"SelectedDevices\"\r\n                value={selected}\r\n                onChange={handleChange}\r\n                options={filtered}\r\n                isMulti\r\n            />\r\n        </FilterSection>\r\n    );\r\n};\r\n\r\nexport default React.memo(SelectedDevices);\r\n","import React, { useState, useEffect } from 'react';\r\nimport { faCheck } from '@fortawesome/free-solid-svg-icons';\r\nimport DeviceService from '../../../common/devices/DeviceService';\r\nimport { useInjection } from '../../../common/di/DependencyContext';\r\nimport FilterSection from '../section/FilterSection';\r\nimport Button, { ButtonVariant, ButtonType } from '../../common/button/Button';\r\nimport { useFilter } from '../../common/context/FilterContext';\r\nimport { Filterable } from '../../../common/filter/FilterService';\r\n\r\nimport './FilterEntity.scss';\r\n\r\nexport interface FilterEntityProps {\r\n    property: Filterable;\r\n    className?: string;\r\n}\r\n\r\nconst FilterEntity: React.FC<FilterEntityProps> = ({ property, className = '' }) => {\r\n    const deviceService = useInjection(DeviceService);\r\n    const { filters, addFilter } = useFilter();\r\n    const [entity, setEntity] = useState<string[]>();\r\n\r\n    useEffect(() => {\r\n        setEntity(deviceService.getEntity(property));\r\n    }, [deviceService, property]);\r\n\r\n    const onClick = (filter: string) => {\r\n        addFilter(property, filter);\r\n    };\r\n\r\n    const isSelected = (filter: string) => {\r\n        const filterProperty = filters.get(property);\r\n        if (!filterProperty) {\r\n            return false;\r\n        }\r\n        return filterProperty.includes(filter);\r\n    };\r\n\r\n    return (\r\n        <FilterSection\r\n            className={`FilterEntity ${className}`}\r\n            name={`Filter by ${property}`}\r\n            helper=\"\"\r\n        >\r\n            <ul className=\"FilterEntity__list\">\r\n                {entity?.map((entityItem: string) => {\r\n                    const isFilterSelected = isSelected(entityItem);\r\n                    const selectedClass = isFilterSelected\r\n                        ? 'FilterEntity__listItem--selected'\r\n                        : '';\r\n                    const additionalProps = isFilterSelected ? { icon: faCheck } : {};\r\n                    return (\r\n                        <li key={entityItem} className={`FilterEntity__listItem ${selectedClass}`}>\r\n                            <Button\r\n                                text={entityItem}\r\n                                variant={ButtonVariant.SECONDARY}\r\n                                type={ButtonType.BUTTON}\r\n                                className=\"FilterEntity__button\"\r\n                                onClick={() => onClick(entityItem)}\r\n                                {...additionalProps}\r\n                            />\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n        </FilterSection>\r\n    );\r\n};\r\n\r\nexport default React.memo(FilterEntity);\r\n","import React from 'react';\r\nimport { Filterable } from '../../common/filter/FilterService';\r\nimport SelectedDevices from './selected_devices/SelectedDevices';\r\nimport FilterEntity from './filter_entity/FilterEntity';\r\n\r\nexport interface DeviceFilterProps {\r\n    className?: string;\r\n}\r\n\r\nconst DeviceFilter: React.FC<DeviceFilterProps> = ({ className = '' }) => {\r\n    return (\r\n        <div className={`DeviceFilter ${className}`}>\r\n            <SelectedDevices />\r\n            <FilterEntity property={Filterable.TYPE} />\r\n            <FilterEntity property={Filterable.PLATFORM} />\r\n            <FilterEntity property={Filterable.MAKE} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(DeviceFilter);\r\n","import React from 'react';\r\nimport { faMobileAlt, faSearch, faFilter, faSearchPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport SidebarButton from './SidebarButton';\r\nimport DeviceZoom from '../../settings/device_zoom/DeviceZoom';\r\nimport UrlSearch from '../../settings/url_search/UrlSearch';\r\nimport DeviceOrientation from '../../settings/device_orientation/DeviceOrientation';\r\nimport DeviceFilter from '../../filters/DeviceFilter';\r\n\r\nimport './Sidebar.scss';\r\n\r\nexport interface SidebarProps {\r\n    className: string;\r\n}\r\n\r\nconst Sidebar: React.FC<SidebarProps> = ({ className }) => {\r\n    return (\r\n        <aside className={`Sidebar ${className}`}>\r\n            <div className=\"Sidebar__menu\">\r\n                <SidebarButton title=\"Search\" icon={faSearch} className=\"Sidebar__menuItem\">\r\n                    <UrlSearch />\r\n                </SidebarButton>\r\n                <SidebarButton title=\"Filters\" icon={faFilter} className=\"Sidebar__menuItem\">\r\n                    <DeviceFilter />\r\n                </SidebarButton>\r\n                <SidebarButton title=\"Orientation\" icon={faMobileAlt} className=\"Sidebar__menuItem\">\r\n                    <DeviceOrientation />\r\n                </SidebarButton>\r\n                <SidebarButton\r\n                    title=\"Device zoom\"\r\n                    icon={faSearchPlus}\r\n                    className=\"Sidebar__menuItem\"\r\n                >\r\n                    <DeviceZoom />\r\n                </SidebarButton>\r\n            </div>\r\n        </aside>\r\n    );\r\n};\r\n\r\nexport default React.memo(Sidebar);\r\n","import React from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\nimport { Routes } from '../../common/routes/Routes';\nimport SettingsProvider from '../common/context/SettingsContext';\nimport Home from '../home/Home';\nimport Header from '../common/header/Header';\nimport Sidebar from '../common/sidebar/Sidebar';\n\nimport './App.scss';\n\nconst App: React.FC = () => {\n    return (\n        <div className=\"App\">\n            <HashRouter basename=\"/\">\n                <SettingsProvider>\n                    <Header className=\"App__header\" />\n                    <Sidebar className=\"App__sidebar\" />\n                    <div className=\"App__content\">\n                        <Switch>\n                            <Route className=\"App\" exact path={Routes.HOME} component={Home} />\n                        </Switch>\n                    </div>\n                </SettingsProvider>\n            </HashRouter>\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\r\nimport dependenciesContainer from '../../../common/di/DependencyContainer';\r\nimport { DependencyProvider } from '../../../common/di/DependencyContext';\r\nimport FilterProvider from './FilterContext';\r\n\r\nconst ContextProvider: React.FC = ({ children }) => {\r\n    return (\r\n        <DependencyProvider container={dependenciesContainer}>\r\n            <FilterProvider>{children}</FilterProvider>\r\n        </DependencyProvider>\r\n    );\r\n};\r\n\r\nexport default ContextProvider;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'reflect-metadata';\r\nimport App from './components/app/App';\r\nimport ContextProvider from './components/common/context/ContextProvider';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './index.scss';\r\n\r\nReactDOM.render(\r\n    <ContextProvider>\r\n        <App />\r\n    </ContextProvider>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}